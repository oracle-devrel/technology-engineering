
# add beeond role
- hosts: compute
  gather_facts: true
  vars:
    destroy: false
  tasks:
    - include_role:
        name: beeond

- hosts: compute
  become: true
  gather_facts: true
  vars_files:
    - "/opt/oci-hpc/conf/queues.conf"
  tasks: 
    - include_role:  
        name: hostname
      when: slurm | default(false) | bool

# for ubuntu, on all compute nodes, run --fix-broken install
- hosts: compute
  become: true
  tasks:
    - include_role:
        name: fix_broken
      when: ansible_os_family == 'Debian'

- hosts: compute
  become: true
  vars: 
    destroy: false
  gather_facts: true
  roles: 
    - oci-cloud-agent 
    - privilege_group
    - oci-legacy
    - packages
    - firewall 
    - oci-hostname
    - ssh
    - limits
    - mpi-hostfiles
    - boot-volume
    - mpivars

- hosts: compute
  become: true
  tasks: 
    - include_role: 
        name: localdisk
      when: localdisk | default(true) | bool

- hosts: compute
  become: true
  gather_facts: true
  tasks: 
    - include_role: 
        name: cloud-agent_update
      when: cluster_network|bool and use_compute_agent|default(false)|bool
    - include_role: 
        name: oci-cn-auth
      when: cluster_network|bool and not use_compute_agent|default(false)|bool
    - include_role: 
        name: rdma-interface
      when: cluster_network|bool and not use_compute_agent|default(false)|bool
    - include_role: 
        name: nvidia_peermem

- hosts: bastion,slurm_backup,login,compute
  become: true
  vars: 
    destroy: false
  gather_facts: true
  roles: 
    - etc-hosts
      
- hosts: nfs
  become: true
  vars:
     export_path: "{{ scratch_nfs_path }}"
     export_name: "scratch"
     local_path:  "/mnt/localdisk/nfs"
     iscsi_ip: "{{ cluster_mount_ip }}"

  tasks: 
    - include_role: 
        name: iscsi
      when: scratch_nfs_type == "block" and scratch_nfs|default(true)|bool
    - include_role: 
        name: nfs-server
      when: scratch_nfs|default(true)|bool

- hosts: compute
  become: true
  
  tasks: 
    - include_role: 
        name: nfs-client
      vars: 
        local_path: "{{ cluster_nfs_path }}"
        export_host: "{{ hostvars[groups['bastion'][0]]['ansible_default_ipv4']['address'] }}"
        export_path: "/export/cluster"
        options: "defaults,noatime,bg,timeo=100,ac,actimeo=120,nocto,rsize=1048576,wsize=1048576,nolock,local_lock={{ lock }},mountproto=tcp,sec=sys,_netdev"
        lock: "all"
      when: cluster_nfs|default(true)|bool
    - include_role: 
        name: nfs-client
      vars: 
        local_path: "{{ scratch_nfs_path }}"
        export_host: "{{ hostvars[groups['nfs'][0]]['ansible_default_ipv4']['address'] }}"
        export_path: "/mnt/localdisk/nfs"
        options: "defaults,noatime,bg,timeo=100,ac,actimeo=120,nocto,rsize=1048576,wsize=1048576,nolock,local_lock={{ lock }},mountproto=tcp,sec=sys,_netdev"
        lock: "none" 
      when: scratch_nfs|default(true)|bool

- hosts: compute
  become: true
  vars_files:
    - "/opt/oci-hpc/playbooks/roles/openldap/defaults/main.yml"
    - "/opt/oci-hpc/playbooks/roles/openldap/vars/el_vars.yml"
    - "/opt/oci-hpc/playbooks/roles/openldap/vars/debian_vars.yml"
  tasks:
    - include_role:
        name: sssd
      when: ldap|default(true)|bool

- hosts: compute
  become: true
  gather_facts: true
  tasks: 
    - include_role: 
        name: hyperthreading
      when: not hyperthreading|default(true)|bool

- hosts: compute
  become: true
  tasks:
    - include_role:
        name: home_nfs
      when: home_nfs|default(true)|bool
    - include_role:
        name: nfs-client
      vars:
        local_path: "/home"
        export_host: "{{ hostvars[groups['bastion'][0]]['ansible_default_ipv4']['address'] }}"
        export_path: "/home"
        options: "defaults,noatime,bg,timeo=100,ac,actimeo=120,nocto,rsize=1048576,wsize=1048576,nolock,local_lock={{ lock }},mountproto=tcp,sec=sys,_netdev"
        lock: "all"
      when: home_nfs|bool and (not home_fss|bool)
    - include_role:
        name: nfs-client
      vars:
        local_path: "/home"
        export_host: "{{ nfs_source_IP }}"
        export_path: "{% if create_fss|bool %}/home{% else%}{{nfs_source_path}}/home{% endif %}"
        options: ""
        lock: "none"
      when: home_nfs|bool and home_fss|bool
    - include_role:
        name: nfs-client
      vars:
        local_path: "{{ nfs_target_path }}"
        export_host: "{{ nfs_source_IP }}"
        export_path: "{{ nfs_source_path }} "
        options: "{{ nfs_options }}"
        lock: "none"
      when: add_nfs|default(false)|bool
     
- hosts: compute
  become: true
  vars:
    enroot_top_path: "{{ nvme_path }}/enroot/"
  tasks:
    - include_role: 
        name: docker
      when: enroot|default(true)|bool
    - include_role: 
        name: nvidia-container
      when: enroot|default(true)|bool
    - include_role: 
        name: nvidia-enroot
      when: enroot|default(true)|bool
    - include_role:
        name: tuned

- hosts: compute
  tasks:  
    - include_role: 
        name: latency_check
      when: cluster_network|bool and latency_check|bool

- hosts: all
  become: true
  tasks: 
    - include_role: 
        name: fix_ldap
      when: ldap|default(true)|bool
      
- hosts: compute, slurm_backup
  vars:
    destroy: false
    initial: false
    download_path: "{{ nfs_target_path if create_fss | bool else ( cluster_nfs_path if cluster_nfs|bool else '/tmp')  }}"
    enroot_top_path: "{{ nvme_path }}/enroot/"
  vars_files:
    - "/opt/oci-hpc/conf/queues.conf"
  tasks:
    - include_role: 
        name: rack-aware
      when: rack_aware|default(false)|bool
    - include_role: 
        name: spack
      when: spack|default(false)|bool
    - include_role: 
        name: slurm
      when: slurm|default(false)|bool
    - include_role: 
        name: influxdb
      when: monitoring|default(false)|bool
    - include_role: 
        name: telegraf
      when: monitoring|default(false)|bool
