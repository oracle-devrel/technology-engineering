queries:
  # Identity and Access Management
  - description: "[CIS 3.0.0]:1.1 Ensure service level admins are created to manage resources of particular service (Manual)"
    sql: > 
      SELECT DISTINCT 
          ic.name as compartment_name,
          ic.path as compartment_path, 
          ip.statement,
          ip.policy_name 
      FROM identity_policy ip 
      JOIN identity_compartments ic ON ip.compartment_id = ic.id 
      WHERE LOWER(ip.statement) LIKE '%allow group%' 
        AND LOWER(ip.statement) LIKE '%to manage all-resources%' 
        AND LOWER(ip.policy_name) != 'tenant admin policy' 
      ORDER BY ip.policy_name;

  - description: "[CIS 3.0.0]:1.2 Ensure permissions on all resources are given only to the tenancy administrator group (Automated)"
    sql: >
      SELECT DISTINCT 
         ic.name as compartment_name,
          ic.path as compartment_path, 
         ip.statement,
         ip.policy_name
      FROM identity_compartments ic
      JOIN identity_policy ip ON ic.id = ip.compartment_id
      WHERE LOWER(ip.statement) LIKE '%allow group%'
       AND LOWER(ip.statement) LIKE '%to manage all-resources in tenancy%'
       AND LOWER(ip.policy_name) != 'tenant admin policy'
      ORDER BY ip.policy_name;

  - description: "[CIS 3.0.0]:1.3 Ensure IAM administrators cannot update tenancy Administrators group"
    sql: >
      SELECT DISTINCT
         ic.name as compartment_name,
         ic.path as compartment_path,
         ip.statement,
         ip.policy_name
      FROM identity_policy ip
      JOIN identity_compartments ic ON ip.compartment_id = ic.id
      WHERE LOWER(ip.policy_name) NOT IN ('tenant admin policy', 'psm-root-policy')
        AND LOWER(ip.statement) LIKE '%allow group%'
        AND LOWER(ip.statement) LIKE '%tenancy%'
        AND (LOWER(ip.statement) LIKE '%to manage%' OR LOWER(ip.statement) LIKE '%to use%')
        AND (LOWER(ip.statement) LIKE '%all-resources%' OR (LOWER(ip.statement) LIKE '%groups%' AND LOWER(ip.statement) LIKE '%users%'));
      ORDER BY ip.policy_name;

  - description: "[CIS 3.0.0]:1.4 Ensure IAM password policy requires minimum length of 14 or greater (Automated). Ensure that 1 or more is selected for Numeric (minimum) OR Special (minimum)"
    sql: >
      SELECT DISTINCT
         ic.name as compartment_name,
         ic.path as compartment_path,
         ip.domain_name,
         ip.name,
         ip.min_length,
         ip.min_numerals,
         ip.min_special_chars
      FROM identity_domains_pwd_policies ip
      JOIN identity_compartments ic ON ip.compartment_ocid = ic.id
      WHERE ip.name = 'defaultPasswordPolicy'
       AND min_length < 14
       AND (ip.min_numerals IS NULL OR ip.min_numerals < 1 OR ip.min_special_chars IS NULL OR ip.min_special_chars < 1)
      ORDER BY LOWER(ip.domain_name)
      
  - description: "[CIS 3.0.0]:1.5 Ensure IAM password policy expires passwords within 365 days (Manual)"
    sql: >
      SELECT DISTINCT
         ic.name as compartment_name,
         ic.path as compartment_path,
         ip.domain_name,
         ip.name,
         ip.password_expires_after 
      FROM identity_domains_pwd_policies ip
      JOIN identity_compartments ic ON ip.compartment_ocid = ic.id
      WHERE ip.name = 'defaultPasswordPolicy' 
        AND (ip.password_expires_after IS NULL OR ip.password_expires_after > 365)
      ORDER BY LOWER(ip.domain_name)

  - description: "[CIS 3.0.0]:1.6 Ensure IAM password policy prevents password reuse (Manual)"
    sql: >
      SELECT DISTINCT
         ic.name as compartment_name,
         ic.path as compartment_path,
         ip.domain_name,
         ip.name,
         ip.num_passwords_in_history 
      FROM identity_domains_pwd_policies ip
      JOIN identity_compartments ic ON ip.compartment_ocid = ic.id
      WHERE ip.name = 'defaultPasswordPolicy' 
      AND (ip.num_passwords_in_history IS NULL OR ip.num_passwords_in_history < 24)
      ORDER BY LOWER(ip.domain_name)

  - description: "[CIS 3.0.0]:1.7 Ensure MFA is enabled for all users with a console password (Automated)"
    sql: >
      SELECT DISTINCT
        domain_name, 
        display_name, 
        mfa_status, 
        is_federated_user, 
        can_use_console_password 
      FROM identity_domains_users 
      WHERE active = 'True' 
        AND is_federated_user IS NULL 
        AND mfa_status IS NULL 
        AND can_use_console_password = 'True'
      ORDER BY LOWER(domain_name)

  - description: "[CIS 3.0.0]:1.8 Ensure user API keys rotate within 90 days (Automated)"
    sql: >
      SELECT DISTINCT
        domain_name,
        display_name,
        can_use_api_keys, 
        api_keys 
      FROM identity_domains_users 
      WHERE can_use_api_keys = 'True' 
        AND api_keys IS NOT NULL
    filter : "age api_keys older 90" 

  - description: "[CIS 3.0.0]:1.9 Ensure user customer secret keys rotate within 90 days (Automated)"
    sql: >
      SELECT DISTINCT
        domain_name, 
        display_name, 
        can_use_customer_secret_keys, 
        customer_secret_keys 
      FROM identity_domains_users 
      WHERE can_use_customer_secret_keys = 'True' 
      AND customer_secret_keys IS NOT NULL
    filter : "age customer_secret_keys older 90" 

  - description: "[CIS 3.0.0]:1.10 Ensure user auth tokens rotate within 90 days or less (Automated)"
    sql: >
      SELECT DISTINCT 
        domain_name, 
        display_name, 
        can_use_auth_tokens, 
        auth_tokens 
      FROM identity_domains_users 
      WHERE can_use_auth_tokens = 'True' 
      AND auth_tokens IS NOT NULL
    filter : "age auth_tokens older 90" 

  - description: "[CIS 3.0.0]:1.11 Ensure user IAM Database Passwords rotate within 90 days (Manual)"
    sql: >
      SELECT DISTINCT
        domain_name, 
        display_name, 
        can_use_db_credentials, 
        db_credentials 
      FROM identity_domains_users 
      WHERE can_use_db_credentials = 'True'
      AND db_credentials IS NOT NULL
    filter : "age db_credentials older 90"

  - description: "[CIS 3.0.0]:1.12 Ensure API keys are not created for tenancy administrator users (Automated)"
    sql: >
      SELECT DISTINCT 
        domain_name, 
        display_name, 
        can_use_api_keys, 
        api_keys, 
        groups 
      FROM identity_domains_users 
      WHERE api_keys IS NOT NULL 
      AND can_use_api_keys = True 
      AND domain_name = 'Default' 
      AND groups LIKE '%Administrators%'

  - description: "[CIS 3.0.0]:1.13 Ensure all OCI IAM user accounts have a valid and current email address (Manual) ⚠️ Assuming account_recovery_required is true when email is not verified."
    sql: >
      SELECT DISTINCT
        domain_name, 
        display_name, 
        external_id, 
        active, 
        status, 
        account_recovery_required 
      FROM identity_domains_users 
      WHERE account_recovery_required is true 
      AND active is true 
      AND external_id is null

  - description: "[CIS 3.0.0]:1.14 Ensure Instance Principal authentication is used for OCI instances, OCI Cloud Databases and OCI Functions to access OCI resources (Manual)"
    sql: >
      SELECT DISTINCT
        c.path AS compartment_path, 
        p.policy_name, 
        p.statement 
      FROM identity_policy p 
      JOIN identity_compartments c ON p.compartment_id = c.id 
      WHERE LOWER(p.statement) LIKE '%request.principal%'

  - description: "[CIS 3.0.0]:1.15 Ensure storage service-level admins cannot delete resources they manage (Manual)"
    sql: >
      WITH storage_policies AS (
          SELECT DISTINCT
              tenant_name,
              policy_name,
              statement,
              LOWER(statement) as statement_lower,
              CASE 
                  WHEN LOWER(statement) LIKE '%where%' THEN 
                      REPLACE(REPLACE(LOWER(SPLIT_PART(statement, 'WHERE', 2)), ' ', ''), '''', '')
                  ELSE ''
              END as clean_where_clause
          FROM identity_policy 
          WHERE LOWER(policy_name) NOT IN ('tenant admin policy', 'psm-root-policy')
            AND LOWER(statement) LIKE '%allow group%'
            AND LOWER(statement) LIKE '%to manage%'
            AND (
                LOWER(statement) LIKE '%object-family%' OR
                LOWER(statement) LIKE '%file-family%' OR  
                LOWER(statement) LIKE '%volume-family%' OR
                LOWER(statement) LIKE '%buckets%' OR
                LOWER(statement) LIKE '%objects%' OR
                LOWER(statement) LIKE '%file-systems%' OR
                LOWER(statement) LIKE '%volumes%' OR
                LOWER(statement) LIKE '%mount-targets%' OR
                LOWER(statement) LIKE '%volume-backups%' OR
                LOWER(statement) LIKE '%boot-volume-backups%'
            )
      ),
      non_compliant_policies AS (
          SELECT *
          FROM storage_policies
          WHERE 
              -- Exclude storage admin policies (they are allowed to have = permissions)
              NOT (clean_where_clause LIKE '%request.permission=bucket_delete%' OR
                   clean_where_clause LIKE '%request.permission=object_delete%' OR
                   clean_where_clause LIKE '%request.permission=file_system_delete%' OR
                   clean_where_clause LIKE '%request.permission=mount_target_delete%' OR
                   clean_where_clause LIKE '%request.permission=export_set_delete%' OR
                   clean_where_clause LIKE '%request.permission=volume_delete%' OR
                   clean_where_clause LIKE '%request.permission=volume_backup_delete%' OR
                   clean_where_clause LIKE '%request.permission=boot_volume_backup_delete%')
              AND (
                  -- No WHERE clause (unrestricted access)
                  (clean_where_clause = '') OR
                  -- WHERE clause exists but doesn't properly restrict delete permissions based on resource type
                  (clean_where_clause != '' AND NOT (
                      -- Object-family restrictions
                      (statement_lower LIKE '%object-family%' AND 
                       clean_where_clause LIKE '%request.permission!=bucket_delete%' AND 
                       clean_where_clause LIKE '%request.permission!=object_delete%') OR
                      -- File-family restrictions
                      (statement_lower LIKE '%file-family%' AND 
                       clean_where_clause LIKE '%request.permission!=export_set_delete%' AND 
                       clean_where_clause LIKE '%request.permission!=mount_target_delete%' AND
                       clean_where_clause LIKE '%request.permission!=file_system_delete%' AND
                       clean_where_clause LIKE '%request.permission!=file_system_delete_snapshot%') OR
                      -- Volume-family restrictions
                      (statement_lower LIKE '%volume-family%' AND 
                       clean_where_clause LIKE '%request.permission!=volume_backup_delete%' AND 
                       clean_where_clause LIKE '%request.permission!=volume_delete%' AND
                       clean_where_clause LIKE '%request.permission!=boot_volume_backup_delete%') OR
                      -- Individual resource restrictions
                      (statement_lower LIKE '%buckets%' AND clean_where_clause LIKE '%request.permission!=bucket_delete%') OR
                      (statement_lower LIKE '%objects%' AND clean_where_clause LIKE '%request.permission!=object_delete%') OR
                      (statement_lower LIKE '%file-systems%' AND 
                       clean_where_clause LIKE '%request.permission!=file_system_delete%' AND
                       clean_where_clause LIKE '%request.permission!=file_system_delete_snapshot%') OR
                      (statement_lower LIKE '%mount-targets%' AND clean_where_clause LIKE '%request.permission!=mount_target_delete%') OR
                      (statement_lower LIKE '%volumes%' AND clean_where_clause LIKE '%request.permission!=volume_delete%') OR
                      (statement_lower LIKE '%volume-backups%' AND clean_where_clause LIKE '%request.permission!=volume_backup_delete%') OR
                      (statement_lower LIKE '%boot-volume-backups%' AND clean_where_clause LIKE '%request.permission!=boot_volume_backup_delete%')
                  ))
              )
      )
      SELECT 
          tenant_name,
          policy_name,
          statement,  
      FROM non_compliant_policies
      ORDER BY tenant_name, policy_name

  - description: "[CIS 3.0.0]:1.16 Ensure OCI IAM credentials unused for 45 days or more are disabled (Automated)"
    sql: >
      SELECT DISTINCT 
        domain_name, 
        user_name, 
        password_last_successful_login_date 
      FROM identity_domains_users
    filter : "age password_last_successful_login_date older 45"

  - description: "[CIS 3.0.0]:1.17 Ensure there is only one active API Key for any single OCI IAM user (Automated)"
    sql: >
      SELECT DISTINCT
        domain_name, 
        display_name, 
        can_use_api_keys, 
        api_keys 
      FROM identity_domains_users 
      WHERE can_use_api_keys = 'True' 
      AND api_keys IS NOT NULL 
      AND CONTAINS(api_keys, ',')
